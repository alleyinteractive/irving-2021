# Travis CI (MIT License) configuration file for the Irving 2021 theme
# @link https://travis-ci.org/

# Bionic image has PHP versions 7.1,7.2,7.3 pre-installed
dist: bionic

# Bionic does not start mysql or memcached by default
services:
  - mysql
  - memcached

# Declare project language.
# @link http://about.travis-ci.org/docs/user/languages/php/
language: php

# PHP version.
php:
  - '7.3'

# Specify when Travis should build.
branches:
  only:
    - main

cache:
  directories:
    - $HOME/.composer/cache
    - ./vendor

# Git clone depth.
git:
  depth: 1
  quiet: true

matrix:
  fast_finish: true
  include:
    - env: WP_VERSION=latest PHP_LINT=1
    - env: WP_VERSION=trunk
    - env: WP_VERSION=latest WP_PHPCS=1 WP_TRAVIS_OBJECT_CACHE=1

# Prepare your build for testing.
# Failures in this section will result in build status 'errored'.
before_script:
  # Turn off Xdebug. See https://core.trac.wordpress.org/changeset/40138.
  - phpenv config-rm xdebug.ini || echo "Xdebug not available"

  - export PATH="${HOME}/.config/composer/vendor/bin:${PATH}"

  # Couple the PHPUnit version to the PHP version.
  - composer global require "phpunit/phpunit=6.1.*"

  - og_dir="$(pwd)"
  - theme_slug="$(basename $(pwd))"

  - |
    if [[ ! -z "$WP_VERSION" ]] ; then
      # Set up the WordPress installation.
      export WP_CORE_DIR=/tmp/wordpress/
      bash bin/install-wp-tests.sh wordpress_test root '' localhost $WP_VERSION
      echo "define( 'JETPACK_DEV_DEBUG', true );" >> $WP_CORE_DIR/wp-tests-config.php

      # Maybe install memcached.
      if [[ "$WP_TRAVIS_OBJECT_CACHE" == "1" ]]; then
        printf "\n" | pecl install --force memcache 1> /dev/null
        curl -s https://raw.githubusercontent.com/Automattic/wp-memcached/master/object-cache.php > "${WP_CORE_DIR}/wp-content/object-cache.php"
      fi

      # Set up the theme. This assumes that this repo name matches the theme name.
      mkdir -p "${WP_CORE_DIR}wp-content/themes/$theme_slug"
      cp -R . "${WP_CORE_DIR}wp-content/themes/$theme_slug/"

      # Hop into theme's directory.
      cd ${WP_CORE_DIR}wp-content/themes/$theme_slug/

      # For debugging.
      which phpunit
      phpunit --version
    fi

  # Set up phpcs.
  - |
    if [[ "$WP_PHPCS" == "1" ]] ; then
      composer install
    fi

  # Set up node_modules.
  - |
    if [[ "$WP_JS" == "1" ]] ; then
      nvm install "$(jq -r '.engines.node' package.json)"
      npm i -g npm@$(jq -r '.engines.npm' package.json)
      npm ci
    fi

  - pwd

# Run test script commands.
# Default is specific to project language.
# All commands must exit with code 0 on success. Anything else is considered failure.
script:
  # Search for PHP syntax errors.
  #
  # Only need to run this once per PHP version.
  - |
    if [[ "$PHP_LINT" == "1" ]] ; then
      find . -type "f" -iname "*.php" -not -path "./vendor/*" | xargs -L "1" php -l
    fi

  # WordPress Coding Standards.
  #
  # These are the same across PHP and WordPress, so we need to run them only once.
  #
  # @link https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards
  # @link http://pear.php.net/package/PHP_CodeSniffer/
  - |
    if [[ "$WP_PHPCS" == "1" ]] ; then
      composer phpcs
    fi

  # Run the theme's unit tests, both in single and multisite.
  - phpunit
  - WP_MULTISITE=1 phpunit

  # Run the theme's JavaScript tests.
  - |
    if [[ "$WP_JS" == "1" ]] ; then
      npm run build
    fi

# Receive notifications for build results.
# @link http://docs.travis-ci.com/user/notifications/#Email-notifications
notifications:
  email: false
